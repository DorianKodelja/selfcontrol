#!/usr/bin/perl
#
# SelfControl -- Stop internet distractions so you can get some work done.
#
use strict;
use warnings;
use Sys::Syslog;
use YAML ();
use SelfControl;
use SelfControl::Config;
use SelfControl::Root;

openlog('SelfControl','pid','local0');
#
# Get config from $ENV{HOME} of calling user.  Some trickery
# involved since %ENV is cleared by sudo for security reasons.
# Get from passwd by uid.
#
my $UID = $<;
$UID = $ENV{SUDO_UID} if exists $ENV{SUDO_UID};
my $HOME = (getpwuid($UID))[7];
my $ConfigFile = "$HOME/.selfcontrol";

#
# if root, apply Config and exit.
#
if ($< == 0) {
  syslog('info','starting root');
  check_chain();
  add_chain($ConfigFile);
  add_hosts($ConfigFile);
  syslog('info','finished root');
  closelog;
  exit;
}

syslog('info','starting user');
#
# not root
#

my @SUDO;
@SUDO = (gksudo => '-D' => 'Self Control');  # XXX annoying if testing.

=for comment - future non-gui interface.

if (-t STDIN) {
  @SUDO = (sudo => '-p' => "Enter your password to perform administrative tasks.\nThe application 'This Program' lets you modify essential parts of your system.\nEnter Password:");
}
else {
  @SUDO = (gksudo => '-D' => 'This Program');
}

=cut

# default config if none exits.
# hope nobody misses example.com for one hour
my $Config = {
  version => 1,
  allow => 1,
  hosts => [[qw<example.com 192.0.32.10>]],
  timeout => 5,
};

$Config = load_config($ConfigFile, $Config);

require SelfControl::UI;
my $UI = SelfControl::UI->new({
  config => $Config,
});
$UI->run();
$Config = $UI->{config};

#
# if 'Start' was clicked, save changes and run self as root
# to apply the blocks and schedule their removal.
#
if ($UI->{started}) {
  save_config($ConfigFile, $Config);
  if (scalar @{$Config->{hosts}}) {
    system(@SUDO, $0);
  }
}

syslog('info','finished user');
closelog;
exit;
